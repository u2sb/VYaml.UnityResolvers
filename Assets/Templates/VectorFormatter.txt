#if ENABLE_MATHEMATICS

using Unity.Mathematics;
using VYaml.Emitter;
using VYaml.Parser;
using VYaml.Serialization.Unity.Formatters.Base.Vector;

namespace VYaml.Serialization.Unity.Formatters.Mathematics
{
  public class {NAME}{L}Formatter : Vector{NAME}Formatter<{NAME_LOW}{L}>
  {
    public static readonly {NAME}{L}Formatter Instance = new();

    public {NAME}{L}Formatter() : base({L})
    {
    }

    public override void Serialize(ref Utf8YamlEmitter emitter, {NAME_LOW}{L} value, YamlSerializationContext context)
    {
{BLOCK0}
      WriteArrayWithFlowStyle(ref emitter);
    }

    public override {NAME_LOW}{L} Deserialize(ref YamlParser parser, YamlDeserializationContext context)
    {
      if (parser.IsNullScalar())
      {
        parser.Read();
        return default;
      }

      var i = ReadScalarAsArray(ref parser);

      return i switch
      {
        {L} => new {NAME_LOW}{L}({BLOCK1}),
        _ => default
      };
    }
  }
}
#endif